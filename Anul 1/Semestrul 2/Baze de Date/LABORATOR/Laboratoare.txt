--lab1
-- SELECT --CLAUZA OBLIGATORIE CAND SE SCRIE COMANDA SELECT
--     UPPER(FIRST_NAME) AS NUME_MAJ, --UN ALIAS SE POATE ADAUGA CU SAU FARA UTILIZAREA LUI 'AS'
--     EMPLOYEE_ID "Id angajat", --DACA ETICHETA CONTINE CARACTERE 'BLANK', ATUNCI ETICHETA SE TRECE INTRE GHILIMELE
--     SALARY * 12 "SALARIU ANUAL"
--CAMPURILE DIN CLAUZA SELECT SE SEPARA PRIN VIRGULA SI POT FI
                                    -- COLOANE ALE TABELULUI/TABELELOR DIN CLAUZA FROM,
                                    -- OPERATII APLICATE ASUPRA ANUMITOR COLOANE,
                                    -- FUNCTII APLICATE ASUPRA ANUMITOR COLOANE
                                    -- SUBCERERI (COMENZI SELECT IN CLAUZELE ALTOR COMENZI)
-- FROM EMPLOYEES --CLAUZA OBLIGATORIE CAND SE SCRIE COMANDA SELECT
-- WHERE SALARY != 10000
--         --DACA UN QUERY ARE MAI MULTE CONDITII, NU SE SCRIU MAI MULTE CLAUZE WHERE,
--             --CI SE SEPARA CONDITIILE FOLOSIND OPERATORII LOGICI 'AND', 'OR', 'NOT'
--         --OPERATORI DE COMPARATIE (=, <> sau !=, <, <=, >, >=)
-- ORDER BY "SALARIU ANUAL" DESC, HIRE_DATE;
--         --PENTRU FIECARE CRITERIU DE SORTARE TREBUIE SPECIFICAT TIPUL DE SORTARE (ASC/DESC)
--         --DACA NU SE SPECIFICA CRITERIUL DE SORTARE, BY DEFAULT ESTE ASC
--
-- SELECT
--     EMPLOYEE_ID,
--     FIRST_NAME
-- FROM EMPLOYEES;

-- --SAU
-- SELECT
--     EMPLOYEES.EMPLOYEE_ID,
--     EMPLOYEES.FIRST_NAME
-- FROM EMPLOYEES;

-- --SAU
-- SELECT
--     E.EMPLOYEE_ID,
--     E.FIRST_NAME
-- FROM EMPLOYEES E;

-- --SAU
-- SELECT
--     "TABEL ANGAJATI".EMPLOYEE_ID,
--     "TABEL ANGAJATI".FIRST_NAME
-- FROM EMPLOYEES "TABEL ANGAJATI";
-- --ETICHETAREA TABELELOR ESTE RECOMANDATA ATUNCI CAND CERERILE SUNT MAI COMPLEXE SI:
--     --FIE SE LUCREAZA CU MAI MULTE INSTANTE ALE UNUI ACELUIASI TABEL SI TREBUIE DIFERENTIATE COLOANELE UTILIZATE

-- SELECT
--     EMPLOYEE_ID,
--     FIRST_NAME
-- FROM EMPLOYEES, EMPLOYEES; --NU SE STIE DACA COLOANELE DIN SELECT TIN DE PRIMA SAU DE A DOUA INSTANTA A LUI EMPLOYEES
--
--     --FIE SE LUCREAZA CU TABELE CARE AU COLOANE CU ACEEASI DENUMIRE
-- SELECT
--     MANAGER_ID,
--     DEPARTMENT_ID
-- FROM EMPLOYEES, DEPARTMENTS; --NU SE STIE DACA COLOANELE DIN SELECT TIN DE TABELUL EMPLOYEES SAU DE TABELUL DEPARTMENTS (CELE 2 COLOANE APAR IN AMBELE TABELE)
--
-- --3
-- DESC EMPLOYEES; -- COMANDA NU ESTE RECUNOSCUTA IN DATAGRIP, SE POATE TESTA IN ORACLE SQL DEVELOPER INSA
--
-- --4
-- SELECT *
-- FROM EMPLOYEES; -- * AJUTA LA AFISAREA TUTUROR COLOANELOR TABELULUI/TABELELOR DIN CLAUZA FROM
--
-- SELECT *, EMPLOYEE_ID FROM EMPLOYEES; -- EROARE: DACA S-A UTILIZAT * IN CLAUZA SELECT, ATUNCI NU SE POT ADAUGA SI ALTE CAMPURI PARTICULARE IN CLAUZA
--
-- --5
-- SELECT
--     EMPLOYEE_ID,
--     FIRST_NAME,
--     JOB_ID,
--     HIRE_DATE
-- FROM EMPLOYEES;
--
-- --6
-- SELECT DISTINCT JOB_ID
-- FROM EMPLOYEES;
--
-- --nu prea se utilizeaza
-- SELECT UNIQUE JOB_ID
-- FROM EMPLOYEES;
--
-- --7
-- SELECT
--     FIRST_NAME || ', ' || JOB_ID --STRING-URILE SE DEFINESC CU APOSTROF, NU CU GHILIMELE
--                                     -- '' -> ECHIVALENT LUI NULL
--                                     --CU GHILIMELE SE DEFINESC DOAR ALIAS-URILE
-- FROM EMPLOYEES;
--
-- --8
-- SELECT
--     FIRST_NAME, SALARY
-- FROM EMPLOYEES
-- WHERE SALARY >= 2850;
--
-- --9
-- SELECT
--     FIRST_NAME,
--     DEPARTMENT_ID
-- FROM EMPLOYEES
-- WHERE EMPLOYEE_ID = 104;
--
-- --10
-- SELECT FIRST_NAME, SALARY
-- FROM EMPLOYEES
-- WHERE SALARY NOT BETWEEN 1500 AND 2850;
-- -- OPERATORUL BETWEEN ESTE FOLOSIT PENTRU VERIFICAREA APARTENENTEI UNEI VALORI LA UN INTERVAL INCHIS
--
-- --11
-- SELECT FIRST_NAME, JOB_ID, HIRE_DATE
-- FROM EMPLOYEES
-- WHERE HIRE_DATE BETWEEN '20-FEB-1987' AND '01-MAY-1989'; -- EXEMPLU DE CONVERSIE IMPLICITA DIN SIR DE CARACTERE IN DATA CALENDARISTICA
--
-- --12
-- SELECT FIRST_NAME, DEPARTMENT_ID
-- FROM EMPLOYEES
-- WHERE DEPARTMENT_ID IN (10, 30)
-- ORDER BY FIRST_NAME;
-- -- OPERATORUL IN ESTE FOLOSIT PENTRU VERIFICAREA APARTENENTEI UNEI VALORI LA O MULTIME
--
-- --13
-- SELECT
--     FIRST_NAME AS ANGAJAT,
--     SALARY * 12 "SALARIU ANUAL"
-- FROM EMPLOYEES
-- WHERE (SALARY >= 1500) AND
--         (DEPARTMENT_ID IN (10, 30))
--
-- --14
-- SELECT
--     FIRST_NAME, JOB_ID
-- FROM EMPLOYEES
-- WHERE MANAGER_ID IS NOT NULL;
--
-- --PENTRU A VERIFICA DACA O COLOANA ESTE NULL SAU NU, SE VA FOLOSI IS/IS NOT
--
-- -- CONDITIILE MANAGER_ID = NULL SI MANAGER_ID != NULL VOR RETURN 'UNKNOWN', NU 'TRUE'/'FALSE'
--
-- -- DACA SE VERIFICA 2 CONDITII, DINTRE CARE UNA IMPLICA 'UNKNOWN', VA REZULTA:
--     -- FALSE AND UNKNOWN -> FALSE
--     -- FALSE OR UNKNOWN -> UNKNOWN
--     -- TRUE OR UNKNOWN -> TRUE
--     -- TRUE AND UNKNOWN -> UNKNOWN
--
-- --15
-- SELECT
--     EMPLOYEE_ID, SALARY, COMMISSION_PCT
-- FROM EMPLOYEES
-- WHERE COMMISSION_PCT IS NOT NULL;
--
-- SELECT
--     EMPLOYEE_ID, SALARY, COMMISSION_PCT
-- FROM EMPLOYEES
-- ORDER BY SALARY DESC, COMMISSION_PCT DESC;
-- --LA SORTARE DESCRESCATOARE, NULL APARE INAINTEA VALORILOR NUMERICE
-- --LA SORTARE CRESCATOARE, NULL APARE DUPA VALORILE NUMERICE
--
--
-- -- LIKE ESTE FOLOSIT PENTRU A VERIFICA DACA UN STRING RESPECTA UN ANUMIT PATTERN
--
-- -- STRING CU 3 CARACTERE, UNDE AL 3-LEA CARACTER ESTE 'B' (__B)
-- -- STRING CU CEL PUTIN 3 CARACTERE, UNDE AL 2-LEA CARACTER ESTE 'B' (_B_%)
--
-- --16
-- SELECT FIRST_NAME
-- FROM EMPLOYEES
-- WHERE UPPER(FIRST_NAME) LIKE '__A%';
--
-- --17
-- SELECT FIRST_NAME
-- FROM EMPLOYEES
-- WHERE UPPER(FIRST_NAME) LIKE '%L%L%' AND
--         (DEPARTMENT_ID = 50 OR MANAGER_ID = 102);
--
-- --18
-- SELECT FIRST_NAME, JOB_ID, SALARY
-- FROM EMPLOYEES
-- WHERE UPPER(JOB_ID) LIKE '%CLERK%'
--         OR UPPER(JOB_ID) LIKE '%REP%' AND
--         (SALARY NOT IN (1000, 2000, 3000));

-- lab2
-- SELECT LENGTH(FIRST_NAME)
-- FROM EMPLOYEES

-- 1
-- SELECT
--     FIRST_NAME || LAST_NAME || 'CASTIGA'|| SALARY
-- FROM EMPLOYEES;
--
-- SELECT CONCAT(CONCAT(CONCAT(FIRST_NAME , LAST_NAME),'CASTIGA'),SALARY)
-- FROM EMPLOYEES;

-- 2
-- SELECT FIRST_NAME, LAST_NAME,LENGTH(LAST_NAME)
-- FROM EMPLOYEES
-- WHERE UPPER(LAST_NAME) LIKE 'J%' OR UPPER(FIRST_NAME) LIKE 'M%' OR UPPER(FIRST_NAME) LIKE '__A%'
-- ORDER BY LENGTH(LAST_NAME) DESC

-- 3
-- SELECT EMPLOYEE_ID, LAST_NAME, DEPARTMENT_ID
-- FROM EMPLOYEES
-- WHERE LOWER(TRIM(FIRST_NAME)) = 'steaven';

-- 4
-- SELECT EMPLOYEE_ID,LAST_NAME,LENGTH(LAST_NAME),INSTR(LOWER(LAST_NAME),'a')
-- FROM EMPLOYEES
-- WHERE LOWER(LAST_NAME) LIKE '%e';

-- 5
-- SELECT EMPLOYEE_ID
-- FROM EMPLOYEES
-- WHERE MOD(TRUNC((SYSDATE - HIRE_DATE), 0 ),7) = 0;

-- 6
-- SELECT EMPLOYEE_ID,LAST_NAME,SALARY,TO_CHAR(SALARY+0.15*SALARY, '99999.99'),ROUND((SALARY+0.15*SALARY)/100,2)
-- FROM EMPLOYEES
-- WHERE MOD(SALARY, 1000) !=0;

-- 7 -tema
-- SELECT LAST_NAME,SALARY,  RPAD('$', FLOOR(salary / 1000), '$') AS "Nivel venit"
-- FROM EMPLOYEES;

--8
-- SELECT TO_CHAR(SYSDATE + 30, 'Month DD, YYYY HH24:MI:SS') AS "Data peste 30 zile"
-- FROM DUAL;

--9
-- SELECT LAST_DAY(SYSDATE) - SYSDATE AS "Zile ramase"
-- FROM DUAL;

-- 10
-- A
-- SELECT SYSDATE + INTERVAL '12' HOUR AS "PESTE 12 ORE"
-- FROM DUAL;

-- B
-- SELECT SYSDATE + INTERVAL '5' MINUTE AS "PESTE 5 MIN"
-- FROM DUAL;

-- 11
-- SELECT FIRST_NAME || ' ' || LAST_NAME AS "Nume complet",
--        HIRE_DATE,
--        NEXT_DAY(ADD_MONTHS(HIRE_DATE, 6), 'Monday') AS "Negociere"
-- FROM EMPLOYEES;

-- 12
-- SELECT LAST_NAME,
--        ROUND(MONTHS_BETWEEN(SYSDATE, HIRE_DATE)) AS "Luni lucrate"
-- FROM EMPLOYEES
-- ORDER BY 2 DESC;

-- 13
-- SELECT LAST_NAME,HIRE_DATE,
--        TO_CHAR(HIRE_DATE,'DATE') AS 'Zi'
-- FROM EMPLOYEES
-- ORDER BY TO_CHAR(hire_date, 'D');

-- 14
-- SELECT LAST_NAME,HIRE_DATE
-- FROM EMPLOYEES
-- WHERE TO_CHAR(HIRE_DATE,'YYYY')=1987
--
-- -- VAR2
-- SELECT last_name, hire_date
-- FROM employees
-- WHERE EXTRACT(YEAR FROM hire_date) = 1987;

-- 15
-- SELECT LAST_NAME,
--        NVL(TO_CHAR(COMMISSION_PCT), 'Fara comision') AS "Comision"
-- FROM EMPLOYEES;

-- 16
-- SELECT LAST_NAME, SALARY, COMMISSION_PCT,
--        (SALARY + (SALARY * NVL(COMMISSION_PCT, 0))) AS "Venit Lunar"
-- FROM EMPLOYEES
-- WHERE (SALARY + (SALARY * NVL(COMMISSION_PCT, 0))) > 10000;

-- 17
-- SELECT LAST_NAME, JOB_ID, SALARY,
--        CASE
--            WHEN JOB_ID = 'IT_PROG' THEN SALARY * 1.2
--            WHEN JOB_ID = 'SA_REP' THEN SALARY * 1.25
--            WHEN JOB_ID = 'SA_MAN' THEN SALARY * 1.35
--            ELSE salary
--        END AS "Salariu dupa marire"
-- FROM EMPLOYEES;

-- LAB3-REZ LAB2
-- 7
-- SELECT
--     LAST_NAME, SALARY, LPAD('$', SALARY/1000,'$')
-- FROM EMPLOYEES;

-- 8
-- SELECT
--     TO_CHAR(SYSDATE+30, 'MONTH, DD, YYYY, HH24:MI:SS ')
-- FROM DUAL;

-- 9
-- SELECT
--     TO_DATE('2025-12-31','YYYY-MM-DD')- SYSDATE
-- FROM DUAL;

-- 11
-- SELECT
--     CONCAT(LAST_NAME,CONCAT(' ',FIRST_NAME)) AS NUME, HIRE_DATE, NEXT_DAY(ADD_MONTHS(HIRE_DATE,6), 'MONDAY') AS NEGOCIERE
-- FROM EMPLOYEES;

-- 12
-- SELECT
--     LAST_NAME,
--     ROUND(MONTHS_BETWEEN(SYSDATE,HIRE_DATE)) AS "LUNI LUCRATE"
-- FROM EMPLOYEES
-- WHERE SUBSTR(TO_CHAR(HIRE_DATE,'DD-MM-YYYY'),-2) LIKE '9_'
-- ORDER BY "LUNI LUCRATE";

-- 13
-- SELECT FIRST_NAME, LAST_NAME,
--        TO_CHAR(HIRE_DATE, 'Day')
-- FROM EMPLOYEES
-- ORDER BY TO_CHAR(HIRE_DATE,'D');

-- 15
-- SELECT
--     LAST_NAME as 'NUME',DECODE(COMMISSION_PCT,null,'Fara comision') as "Comision"
-- FROM EMPLOYEES;

-- SELECT *
-- FROM EMPLOYEES;

-- 16
-- SELECT LAST_NAME,SALARY,
--        (SALARY+SALARY *NVL(COMMISSION_PCT,0))
-- FROM EMPLOYEES
-- WHERE (SALARY+EMPLOYEES.SALARY*NVL(COMMISSION_PCT,0))>1000;

-- 17

-- LAB 3
-- JOIN
-- VAR1
-- SELECT FIRST_NAME, DEPARTMENT_NAME
-- FROM EMPLOYEES, DEPARTMENTS
-- WHERE EMPLOYEES.DEPARTMENT_ID=DEPARTMENTS.DEPARTMENT_ID;
--
-- -- VAR 2 -CEL  MAI DES
-- SELECT *
-- FROM EMPLOYEES E
-- JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--
-- -- VAR 3
-- SELECT *
-- FROM EMPLOYEES
-- JOIN DEPARTMENTS USING(DEPARTMENT_ID);
--
-- SELECT
--     E.FIRST_NAME, D.DEPARTMENT_ID
-- FROM EMPLOYEES E
-- FULL OUTER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--
-- SELECT * FROM EMPLOYEES;
--
-- SELECT E.FIRST_NAME, D.DEPARTMENT_NAME
-- FROM EMPLOYEES D
-- LEFT JOIN JOBS J on J.JOB_ID = E.JOB_ID;
--
-- -- 1
-- SELECT
--     JOB_TITLE, FIRST_NAME
-- FROM EMPLOYEES E
-- JOIN JOBS J ON E.JOB_ID = J.JOB_ID
-- WHERE E.DEPARTMENT_ID = 30;
--
-- -- 2
-- SELECT FIRST_NAME, DEPARTMENT_NAME
-- FROM EMPLOYEES E
-- JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
-- WHERE LOWER(FIRST_NAME) LIKE '%a%' AND TO_CHAR(HIRE_DATE, 'YYYY')=1990;
--
-- -- 3
-- SELECT E.FIRST_NAME, J.JOB_TITLE, E.DEPARTMENT_ID
-- FROM EMPLOYEES E
-- JOIN JOBS J ON J.JOB_ID= E.JOB_ID
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
-- JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID
-- WHERE UPPER(L.CITY)='OXFORD' AND E.COMMISSION_PCT IS NULL;
--
-- -- 4
-- SELECT E.FIRST_NAME, J.JOB_TITLE, TO_CHAR(E.HIRE_DATE,'MON')
-- FROM EMPLOYEES E
-- JOIN JOBS J ON J.JOB_ID=E.JOB_ID
-- WHERE E.SALARY>3000 OR E.SALARY=(J.MIN_SALARY+J.MAX_SALARY)/2;
--
-- -- 5
-- SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME, E.FIRST_NAME, E.LAST_NAME, J.JOB_TITLE
-- FROM EMPLOYEES E
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
-- JOIN JOBS J  ON J.JOB_ID=E.JOB_ID
-- WHERE LOWER(D.DEPARTMENT_NAME) LIKE '%ti%' AND E.SALARY BETWEEN 5000 AND 7000
-- ORDER BY D.DEPARTMENT_NAME, E.FIRST_NAME
--
-- -- 6
-- SELECT E.EMPLOYEE_ID AS ANG#,
--        E.FIRST_NAME AS ANGAJAT,
--        M.EMPLOYEE_ID AS MGR#,
--        M.FIRST_NAME AS MANAGER
-- FROM EMPLOYEES E
-- JOIN EMPLOYEES M ON E.MANAGER_ID = M.EMPLOYEE_ID
--
-- -- 7
-- SELECT E.LAST_NAME, E.HIRE_DATE
-- FROM EMPLOYEES E
-- WHERE E.HIRE_DATE > (SELECT E1.HIRE_DATE
--                      FROM EMPLOYEES E1
--                      WHERE E1.LAST_NAME='GATES')
--
--
-- -- CU JOIN
-- SELECT E.LAST_NAME, E.HIRE_DATE
-- FROM EMPLOYEES E
-- JOIN EMPLOYEES G ON G.HIRE_DATE > G.HIRE_DATE
-- WHERE LOWER(G.LAST_NAME)='GATES';

--8
-- SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.FIRST_NAME, D.DEPARTMENT_ID, D.DEPARTMENT_NAME
-- FROM EMPLOYEES E
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
-- WHERE LOWER(E.LAST_NAME) LIKE '%t%'
-- ORDER BY E.LAST_NAME;

--9
--1
-- SELECT
--     E.LAST_NAME, E.SALARY
-- FROM EMPLOYEES E
-- SELECT E.LAST_NAME, E.FIRST_NAME, E.SALARY, J.JOB_TITLE ,D.DEPARTMENT_ID,L.CITY,C.COUNTRY_NAME
-- FROM EMPLOYEES E
-- JOIN JOBS J ON J.JOB_ID=E.JOB_ID
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
-- JOIN LOCATIONS L ON  L.LOCATION_ID=D.LOCATION_ID
-- JOIN COUNTRIES C ON C.COUNTRY_ID=L.COUNTRY_ID
-- WHERE E.MANAGER_ID in (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE UPPER(LAST_NAME)='KING');

--REZOLVARE
--8
-- SELECT UNIQUE E.EMPLOYEE_ID, E.LAST_NAME, E.FIRST_NAME, D.DEPARTMENT_ID, D.DEPARTMENT_NAME
-- FROM EMPLOYEES E
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
-- JOIN EMPLOYEES C ON E.DEPARTMENT_ID=C.DEPARTMENT_ID
-- WHERE UPPER(E.LAST_NAME) LIKE '%T%' AND C.LAST_NAME=E.LAST_NAME
-- ORDER BY E.LAST_NAME;

--9
-- SELECT E.LAST_NAME, E.FIRST_NAME, E.SALARY, J.JOB_TITLE ,D.DEPARTMENT_ID,L.CITY,C.COUNTRY_NAME
-- FROM EMPLOYEES E
-- JOIN JOBS J ON J.JOB_ID=E.JOB_ID
-- JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
-- JOIN LOCATIONS L ON  L.LOCATION_ID=D.LOCATION_ID
-- JOIN COUNTRIES C ON C.COUNTRY_ID=L.COUNTRY_ID
-- WHERE E.MANAGER_ID in (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE UPPER(LAST_NAME)='KING');


--
-- SELECT EMPLOYEE_ID, FIRST_NAME
-- FROM EMPLOYEES
-- UNION
-- SELECT DEPARTMENT_ID,DEPARTMENT_NAME
-- FROM DEPARTMENTS;

--1
-- SELECT DEPARTMENT_ID
-- FROM DEPARTMENTS
-- WHERE UPPER(DEPARTMENT_NAME) LIKE '%RE%'
-- UNION
-- SELECT DEPARTMENT_ID
-- FROM DEPARTMENTS
-- JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID=DEPARTMENTS.DEPARTMENT_ID
-- WHERE EMPLOYEES.JOB_ID='SA_REP';

--2
-- SELECT DEPARTMENT_ID
-- FROM DEPARTMENTS
-- MINUS
-- SELECT DEPARTMENT_ID
-- FROM EMPLOYEES
--
-- SELECT E.EMPLOYEE_ID, D.DEPARTMENT_ID
-- FROM EMPLOYEES E;

--lab 4
--subcereri

--daca folosim o coloana dintr-un tabel din afara tabelului -este sincronizata
--cand in interior nu are ceva ce e in afara-este nesincronizata

--in from si join sunt mereu subcereri sincronizate

 --1
SELECT D.DEPARTMENT_NAME
FROM DEPARTMENTS D
JOIN EMPLOYEES E ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
WHERE UPPER(E.LAST_NAME)='GATES';

SELECT E.LAST_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE UPPER(D.DEPARTMENT_NAME)='SHIPPING';


--=>
SELECT E.LAST_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID=D.DEPARTMENT_ID
WHERE D.DEPARTMENT_NAME=(SELECT D.DEPARTMENT_NAME
                            FROM DEPARTMENTS D
                            JOIN EMPLOYEES E ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
                            WHERE UPPER(E.LAST_NAME)='GATES'
                            );

--2
SELECT
    E.EMPLOYEE_ID, E.FIRST_NAME, E.SALARY,(
        SELECT M.FIRST_NAME
        FROM EMPLOYEES M
        WHERE M.MANAGER_ID=E.EMPLOYEE_ID
    )
FROM EMPLOYEES E;

--3
SELECT E.FIRST_NAME || E.LAST_NAME
FROM EMPLOYEES E
WHERE SALARY > ALL(SELECT
                    --MAX(SALARY)
                SALARY
                FROM EMPLOYEES E1
                WHERE UPPER(E1.JOB_ID) LIKE '%CLERK%'
                );

--lab 6
--4
SELECT E.FIRST_NAME, E.LAST_NAME, D.DEPARTMENT_NAME,E.SALARY
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
WHERE E.COMMISSION_PCT IS NULL
AND (SELECT E1.COMMISSION_PCT
     FROM EMPLOYEES E1
     WHERE E.MANAGER_ID=E1.EMPLOYEE_ID IS NOT NULL);

--5
SELECT E.FIRST_NAME, E.LAST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON D.DEPARTMENT_ID=E.DEPARTMENT_ID
WHERE HIRE_DATE = (
    SELECT
        MIN(E1.HIRE_DATE)
    FROM EMPLOYEES E1
    WHERE E1.DEPARTMENT_ID=E.DEPARTMENT_ID
    )
ORDER BY DEPARTMENT_NAME;

--6
SELECT
   E.FIRST_NAME, E.DEPARTMENT_ID, E.SALARY
FROM EMPLOYEES E
WHERE ( E.DEPARTMENT_ID, E.SALARY) IN (
    SELECT
        E1.DEPARTMENT_ID, E1.SALARY
    FROM EMPLOYEES E1
    WHERE E1.COMMISSION_PCT IS NOT NULL
    AND E.EMPLOYEE_ID != E1.EMPLOYEE_ID);

--7
SELECT
   E1.FIRST_NAME,E1.SALARY,
        (
        SELECT
            E3.FIRST_NAME
        FROM EMPLOYEES E3
        WHERE E3.SALARY = (
            SELECT
                MAX(SALARY)
            FROM EMPLOYEES E4
            WHERE E4.DEPARTMENT_ID = E3.DEPARTMENT_ID
            AND E4.EMPLOYEE_ID != E3.EMPLOYEE_ID
            )
    )
FROM EMPLOYEES E1
JOIN EMPLOYEES E2 ON E1.EMPLOYEE_ID=E2.EMPLOYEE_ID
WHERE E1.MANAGER_ID IN (
SELECT
    E.EMPLOYEE_ID
FROM EMPLOYEES E
WHERE E.MANAGER_ID IS NULL);

--8
--ROWNUM -A CATA INREGISTRARE ESTE (NR DE ORDINE AL UNEI LINII IN REZULTAT)

--9
SELECT LAST_NAME, FIRST_NAME, SALARY
FROM (SELECT *
     FROM EMPLOYEES
     ORDER BY SALARY DESC)
WHERE ROWNUM<=7
ORDER BY SALARY;


SELECT SALARY, FIRST_NAME, LAST_NAME
FROM EMPLOYEES

WHERE SALARY IN (SELECT SALARY
         FROM ( SELECT DISTINCT SALARY
                FROM EMPLOYEES
                ORDER BY SALARY DESC)
         WHERE ROWNUM <=7)
ORDER BY SALARY;

--10
SELECT LAST_NAME, FIRST_NAME
FROM EMPLOYEES
WHERE SALARY IN (SELECT SALARY
         FROM ( SELECT DISTINCT SALARY
                FROM EMPLOYEES
                ORDER BY SALARY DESC)
         WHERE ROWNUM <=7);

 SELECT SALARY,EMPLOYEE_ID
 FROM EMPLOYEES
 WHERE SALARY=(
 SELECT SALARY
 FROM(SELECT SALARY
        FROM ( SELECT DISTINCT SALARY
                FROM EMPLOYEES
                ORDER BY SALARY DESC)
         WHERE ROWNUM <=7
        ORDER BY SALARY ASC)
 WHERE ROWNUM =1)

--LAB 5
-- where face filtrarea inainte de grupare
-- having face filtrarea dupa grupare
-- fct grup -max,min,sum,average,count
-- fct grup rpimesc ca parametrii numai coloane

-- 1
SELECT
    COUNT(DISTINCT E.MANAGER_ID)
FROM EMPLOYEES E;

-- 2
SELECT
    E1.EMPLOYEE_ID, E1.FIRST_NAME
FROM EMPLOYEES E1
WHERE E1.SALARY > (
    SELECT
        SUM(E.SALARY)/COUNT(E.EMPLOYEE_ID)
    FROM EMPLOYEES E
    );

-- 3
SELECT
    E.MANAGER_ID, MIN(E.SALARY)
FROM EMPLOYEES E
WHERE E.MANAGER_ID IS NOT NULL
GROUP BY E.MANAGER_ID
HAVING MIN(E.SALARY) > 4000
ORDER BY MIN(E.SALARY) DESC;

-- 4
 SELECT MAX(AVG(SALARY))
 FROM EMPLOYEES
 GROUP BY DEPARTMENT_ID;


-- 5
SELECT
    E.JOB_ID,SUM(E.SALARY),D.DEPARTMENT_NAME
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.DEPARTMENT_ID > 80
GROUP BY D.DEPARTMENT_NAME, E.JOB_ID;

-- 6
SELECT
    SUM(E.COMMISSION_PCT)/COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E
GROUP BY E.COMMISSION_PCT;

-- 7
SELECT
    E.DEPARTMENT_ID, D.DEPARTMENT_NAME, COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.DEPARTMENT_ID IN(
SELECT
    E1.DEPARTMENT_ID
FROM EMPLOYEES E1
GROUP BY E1.DEPARTMENT_ID
HAVING COUNT(E1.EMPLOYEE_ID)<4
)
GROUP BY E.DEPARTMENT_ID, D.DEPARTMENT_NAME;


SELECT
    E.DEPARTMENT_ID,
    D.DEPARTMENT_NAME,
    COUNT(E.EMPLOYEE_ID)
FROM EMPLOYEES E
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY E.DEPARTMENT_ID, D.DEPARTMENT_NAME
HAVING COUNT(E.EMPLOYEE_ID) < 4;


-- 8
SELECT
    E1.JOB_ID,J.JOB_TITLE,AVG(E1.SALARY)
FROM EMPLOYEES E1
JOIN JOBS J ON E1.JOB_ID = J.JOB_ID
GROUP BY E1.JOB_ID, J.JOB_TITLE
HAVING AVG(E1.SALARY) = (
SELECT MIN(AVG(E.SALARY))
FROM EMPLOYEES E
GROUP BY E.JOB_ID);

--9
SELECT
    D.DEPARTMENT_NAME, MIN(E.SALARY)
FROM EMPLOYEES E
JOIN DEPARTMENTS D on D.DEPARTMENT_ID = E.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_NAME
HAVING AVG(E.SALARY) = (
    SELECT
        MAX(AVG(SALARY))
    FROM EMPLOYEES
    GROUP BY DEPARTMENT_ID
    );

--10
SELECT
    T.DEPARTMENT_ID, D.DEPARTMENT_NAME, T.CNT, T.SAL, E.EMPLOYEE_ID, E.SALARY, E.JOB_ID
FROM EMPLOYEES E
JOIN (
        SELECT
            E2.DEPARTMENT_ID, COUNT(*) CNT, AVG(E2.SALARY) SAL
        FROM EMPLOYEES E2
        GROUP BY E2.DEPARTMENT_ID
    )T ON E.DEPARTMENT_ID = T.DEPARTMENT_ID
JOIN DEPARTMENTS D on E.DEPARTMENT_ID = D.DEPARTMENT_ID


